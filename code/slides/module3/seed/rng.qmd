---
title: Setting the seed
jupyter:
  jupytext:
    formats: 'ipynb,qmd,R'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.7
  kernelspec:
    display_name: R
    language: R
    name: ir
---



```{r}
x = runif(10)
mean(x^2)
```

```{r}
x = runif(10)
mean(x^2)
```

```{r}
set.seed(887561)
x = runif(10)
mean(x^2)
```

```{r}
set.seed(887561)
x = runif(10)
mean(x^2)
```

## Under the hood in `R`

```{r}
head(.Random.seed)
```

```{r}
get_rseed = function(){
    if(!exists(".Random.seed")) 
        set.seed(NULL)
    return(.Random.seed)
}
```

```{r}
head(get_rseed())
```

## Saving seeds without an explicit set

```{r}
read_or_run = function(filen,func){
    if(!file.exists(filen)){
        cat('Running func...');flush.console()
        obj = func()
        saveRDS(object=obj,file=filen)
    } else {
        cat('Reading from cache...');flush.console()
        obj = readRDS(file=filen)
    }
    return(obj)
}
```

```{r}
.Random.seed = read_or_run("random_seed", get_rseed)

x = runif(10)
mean(x^2)
```

```{r}
.Random.seed = read_or_run("random_seed", get_rseed)

x = runif(10)
mean(x^2)
```

```{r}
#system('rm random_seed')
```

```{r}
rseed = read_or_run("random_seed", get_rseed)
.Random.seed = rseed

x = runif(10)
mean(x^2)
```

# Functions

```{r}
mc_est = function(){
    set.seed(887561)
    x = runif(10)
    mean(x^2)   
}
```

```{r}
N_rep = 5
var(replicate(N_rep,mc_est()))
```

```{r}
replicate(N_rep,mc_est())
```

a correct way

```{r}
set.seed(887561)

mc_est = function(){
    x = runif(10)
    mean(x^2)   
}

N_rep = 5
var(replicate(N_rep,mc_est()))
```

# Beware: parallel

```{r}
library(parallel)
cl <- makeCluster(5)
```

```{r}
mc_est = function(i){
    x = runif(10)
    mean(x^2)   
}
```

```{r}
set.seed(887561)
out = clusterApply(cl, 1:5, mc_est)
out
```

```{r}
set.seed(887561)
clusterApply(cl, 1:5, mc_est)
```

a kludgy solution

```{r}
set.seed(887561)
seeds = sample.int(100000000,5)
seeds
```

```{r}
mc_est = function(i){
    set.seed(seeds[i])
    x = runif(10)
    mean(x^2)   
}

cl <- makeCluster(5)
clusterExport(cl=cl, varlist="seeds", envir=environment())

clusterApply(cl, 1:5, mc_est)
```

```{r}
clusterApply(cl, 1:5, mc_est)
```

a better parallel RNG

```{r}
cl <- makeCluster(5)
clusterSetRNGStream(cl, iseed = 887561)
mc_est = function(i){
    x = runif(10)
    mean(x^2)   
}

clusterApply(cl, 1:5, mc_est)
```

```{r}
clusterSetRNGStream(cl, iseed = 887561)
clusterApply(cl, 1:5, mc_est)
```

```{r}
cl <- makeCluster(2)
clusterSetRNGStream(cl, iseed = 887561)
mc_est = function(i){
    x = runif(10)
    mean(x^2)   
}

clusterApply(cl, 1:5, mc_est)
```

a very reproducible approach

```{r}
mc_est = function(i){
    x = runif(10)
    mean(x^2)   
}
```

```{r}
library('future.apply')
plan(multisession,workers=5)
future_lapply(1:5,FUN=mc_est,future.seed=887561)
```

```{r}
library('future.apply')
plan(multisession,workers=2)
future_lapply(1:5,FUN=mc_est,future.seed=887561)
```
